import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger
from src.scrapers.leboncoin.image_processor import process_and_transfer_images
from src.database.database import init_db, close_db
import os
import sys

# Configuration des logs
if not os.path.exists("logs/leboncoin"):
    os.makedirs("logs/leboncoin")
if not os.path.exists("logs/capture/leboncoin"):
    os.makedirs("logs/capture/leboncoin")

logger.remove()  # Supprime la configuration par d√©faut
logger.add(sys.stdout, level="DEBUG")  # Affiche tout dans la console
logger.add(
    "logs/leboncoin/cron_{time:YYYY-MM-DD}.log",
    rotation="1 day",
    retention="7 days",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
)

# Variable pour suivre l'√©tat de la t√¢che
running_task = False

async def process_images_job():
    """T√¢che planifi√©e pour traiter les images des annonces de la collection realStateWithAgence."""
    global running_task
    if running_task:
        logger.info("‚è≥ T√¢che de traitement des images d√©j√† en cours, saut de cette ex√©cution.")
        return

    running_task = True
    try:
        logger.info("üì∏ D√©but du traitement des images des annonces (realStateWithAgence -> realStateFinale)...")
        await init_db()  # Initialiser la connexion √† la base de donn√©es
        result = await process_and_transfer_images(max_concurrent_tasks=20)
        logger.info(f"‚úÖ Traitement termin√© : {result['processed']} annonces trait√©es et transf√©r√©es.")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Erreur lors du traitement des images : {e}")
    finally:
        await close_db()  # Fermer la connexion √† la base de donn√©es
        running_task = False

async def start_cron():
    """D√©marre le planificateur pour ex√©cuter la t√¢che de traitement des images p√©riodiquement."""
    scheduler = AsyncIOScheduler()
    # Planifier la t√¢che toutes les 10 minutes
    scheduler.add_job(process_images_job, "interval", minutes=10)
    scheduler.start()
    logger.info("‚è∞ Planificateur d√©marr√© : traitement des images toutes les 10 minutes.")

    # Garder le script en vie
    try:
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logger.info("üõë Planificateur arr√™t√©.")

if __name__ == "__main__":
    # Lancer le planificateur
    asyncio.run(start_cron())