from playwright.async_api import expect, TimeoutError as PlaywrightTimeoutError
from src.scrapers.leboncoin.utils.human_behavorScrapperLbc import (
    human_like_click_search,
    human_like_delay_search,
    human_like_scroll_to_element_search,
    human_like_scroll_to_element
)
from loguru import logger
import asyncio
import random
from src.scrapers.leboncoin.listings_parser import get_latest_valid_api_response, process_ad
from src.captcha.captchaSolver import solve_audio_captcha
from src.database.database import init_db, close_db

TARGET_API_URL = "https://api.leboncoin.fr/finder/search"
EXPECTED_LOCATIONS_URL = "https://www.leboncoin.fr/c/locations"

async def check_and_solve_captcha(page, action: str) -> bool:
    """V√©rifie et r√©sout le CAPTCHA si pr√©sent avant une action."""
    captcha_selector = 'iframe[title="DataDome CAPTCHA"]'
    try:
        if await page.locator(captcha_selector).is_visible(timeout=3000):
            logger.warning(f"‚ö†Ô∏è CAPTCHA d√©tect√© avant {action}.")
            if not await solve_audio_captcha(page):
                logger.error(f"‚ùå √âchec de la r√©solution du CAPTCHA avant {action}.")
                return False
            logger.info(f"‚úÖ CAPTCHA r√©solu avant {action}.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification CAPTCHA avant {action} : {e}")
    return True

async def close_cookies_popup(page):
    ACCEPT_BUTTON = '#didomi-popup > div > div > div > span'
    logger.info("üîç V√©rification de la popup des cookies...")
    accept_button = page.locator(ACCEPT_BUTTON)
    if await accept_button.is_visible(timeout=5000):
        await human_like_scroll_to_element_search(page, ACCEPT_BUTTON, scroll_steps=2, jitter=True)
        await human_like_delay_search(0.5, 1.5)
        if not await check_and_solve_captcha(page, "fermeture cookies"):
            raise Exception("√âchec CAPTCHA avant fermeture cookies")
        await human_like_click_search(page, ACCEPT_BUTTON, move_cursor=True, click_delay=0.7)
        logger.info("‚úÖ Popup des cookies ferm√©e.")
    else:
        logger.info("‚úÖ Aucune popup de cookies d√©tect√©e.")

async def close_gimii_popup(page) -> bool:
    # S√©lecteur corrig√© pour la popup Gimii
    GIMII_POPUP = 'div[class*="gimii_root__"]'  # Conteneur de la popup
    CLOSE_BUTTON = 'button[class*="gimii_root__"][class*="gimii_secondary__"][class*="gimii_action__"]'  # Bouton "Je ne souhaite pas participer"
    logger.info("üîç V√©rification de la popup Gimii...")

    # Attendre que la popup soit visible avec un timeout plus long
    popup = page.locator(GIMII_POPUP)
    close_button = page.locator(CLOSE_BUTTON)
    
    # Boucle d'attente dynamique pour d√©tecter la popup
    max_wait = 10  # Attendre jusqu'√† 10 secondes
    start_time = asyncio.get_event_loop().time()
    while asyncio.get_event_loop().time() - start_time < max_wait:
        try:
            if await popup.is_visible(timeout=1000):
                logger.info("‚úÖ Popup Gimii d√©tect√©e.")
                # S'assurer que le bouton de fermeture est visible
                await close_button.wait_for(state="visible", timeout=5000)
                await human_like_scroll_to_element_search(page, CLOSE_BUTTON, scroll_steps=2, jitter=True)
                await human_like_delay_search(0.5, 1.5)
                if not await check_and_solve_captcha(page, "fermeture Gimii"):
                    raise Exception("√âchec CAPTCHA avant fermeture Gimii")
                await human_like_click_search(page, CLOSE_BUTTON, move_cursor=True, click_delay=0.7)
                logger.info("‚úÖ Popup Gimii ferm√©e.")
                # Attendre un peu pour s'assurer que la popup est bien ferm√©e
                await human_like_delay_search(1, 2)
                # V√©rifier que la popup a bien disparu
                if await popup.is_visible(timeout=2000):
                    logger.warning("‚ö†Ô∏è Popup Gimii toujours visible apr√®s tentative de fermeture.")
                    return False
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la d√©tection de la popup Gimii : {e}")
        await asyncio.sleep(0.5)

    # Si la popup n'est pas d√©tect√©e apr√®s le d√©lai, capturer une capture d'√©cran pour d√©bogage
    logger.warning("‚ö†Ô∏è Aucune popup Gimii d√©tect√©e apr√®s attente prolong√©e.")
    await page.screenshot(path="gimii_detection_error.png")
    page_content = await page.content()
    with open("gimii_detection_error.html", "w", encoding="utf-8") as f:
        f.write(page_content)
    logger.info("üì∏ Capture d'√©cran et contenu HTML sauvegard√©s pour d√©bogage (gimii_detection_error).")
    return False

async def wait_for_page_load(page):
    LOCATIONS_LINK = 'a[href="/c/locations"][title="Locations"]'
    logger.info("‚è≥ Attente du chargement initial de la page...")
    locator = page.locator(LOCATIONS_LINK)
    max_wait = 60
    start_time = asyncio.get_event_loop().time()
    while asyncio.get_event_loop().time() - start_time < max_wait:
        if await locator.is_visible(timeout=1000):
            await human_like_delay_search(1, 3)
            logger.info("‚úÖ Page charg√©e avec le lien 'Locations' visible.")
            return
        await asyncio.sleep(0.5)
    logger.error("‚ö†Ô∏è Timeout lors de l'attente du chargement de la page : lien 'Locations' non trouv√©.")
    raise PlaywrightTimeoutError("Page non charg√©e dans le d√©lai imparti")

async def navigate_to_locations(page, max_attempts=3):
    LOCATIONS_LINK = 'a[href="/c/locations"][title="Locations"]'
    FILTERS_BUTTON = 'button[title="Afficher tous les filtres"]'
    RESULTS_CONTAINER = '[data-test-id="listing-card"]'
    logger.info("üåÄ Navigation vers 'Locations'...")

    for attempt in range(1, max_attempts + 1):
        try:
            logger.info(f"üåÄ Tentative {attempt}/{max_attempts} de navigation vers 'Locations'...")

            # √âtape 1 : Fermer la popup des cookies et attendre
            await close_cookies_popup(page)
            logger.info("‚è≥ Attente apr√®s fermeture des cookies...")
            await human_like_delay_search(1, 2)

            # √âtape 2 : V√©rifier Gimii une seule fois avant de scroller
            gimii_closed = await close_gimii_popup(page)
            if gimii_closed:
                logger.info("‚úÖ Popup Gimii d√©tect√©e et ferm√©e avant d√©filement.")
            else:
                logger.info("‚úÖ Aucune popup Gimii d√©tect√©e avant d√©filement.")

            # Ajouter un d√©lai avant de scroller pour simuler un comportement humain
            logger.info("‚è≥ Attente prolong√©e avant de scroller vers 'Locations'...")
            await human_like_delay_search(4, 6)  # D√©lai de 4 √† 6 secondes

            # √âtape 3 : Scroller vers le lien "Locations"
            logger.info("üìú D√©filement vers le lien 'Locations'...")
            await human_like_scroll_to_element_search(page, LOCATIONS_LINK, scroll_steps=random.randint(6, 10), jitter=True)

            # √âtape 4 : V√©rifier que le lien "Locations" est visible et cliquable
            locations_link = page.locator(LOCATIONS_LINK)
            try:
                await locations_link.wait_for(state="visible", timeout=30000)
                logger.info("‚úÖ Lien 'Locations' visible apr√®s d√©filement.")
                await expect(locations_link).to_be_enabled(timeout=5000)
                logger.info("‚úÖ Lien 'Locations' est cliquable.")
            except PlaywrightTimeoutError as e:
                logger.error(f"‚ùå Lien 'Locations' non trouv√© ou non cliquable dans le d√©lai imparti : {e}")
                await page.screenshot(path=f"locations_link_error_attempt_{attempt}.png")
                raise Exception("Lien 'Locations' non visible ou non cliquable sur la page.")

            # √âtape 5 : V√©rifier Gimii apr√®s le d√©filement et avant le clic, avec plusieurs tentatives
            max_gimii_attempts = 3
            for gimii_attempt in range(max_gimii_attempts):
                gimii_before_click = await close_gimii_popup(page)
                if gimii_before_click:
                    logger.info(f"‚úÖ Popup Gimii d√©tect√©e et ferm√©e apr√®s d√©filement (tentative {gimii_attempt + 1}/{max_gimii_attempts}).")
                    # Attendre un peu apr√®s la fermeture pour s'assurer que la popup est bien ferm√©e
                    await human_like_delay_search(1, 2)
                    # S'assurer que le lien "Locations" est toujours visible apr√®s la fermeture de Gimii
                    await human_like_scroll_to_element_search(page, LOCATIONS_LINK, scroll_steps=2, jitter=True)
                    await locations_link.wait_for(state="visible", timeout=10000)
                    await expect(locations_link).to_be_enabled(timeout=5000)
                else:
                    logger.info("‚úÖ Aucune popup Gimii d√©tect√©e apr√®s d√©filement.")
                    break
            else:
                logger.error(f"‚ùå Popup Gimii persiste apr√®s {max_gimii_attempts} tentatives de fermeture.")
                raise Exception("√âchec de la fermeture de la popup Gimii avant clic sur Locations")

            # √âtape 6 : V√©rifier les blocages anti-bot avant le clic
            captcha_iframe = page.locator('iframe[title="DataDome CAPTCHA"]')
            if await captcha_iframe.is_visible(timeout=3000):
                logger.warning("‚ö†Ô∏è CAPTCHA d√©tect√© avant clic sur 'Locations', tentative de r√©solution...")
                if not await solve_audio_captcha(page):
                    logger.error("‚ùå √âchec de la r√©solution du CAPTCHA avant clic sur 'Locations'.")
                    raise Exception("√âchec CAPTCHA avant clic sur Locations")
                logger.info("‚úÖ CAPTCHA r√©solu, reprise de la navigation...")

            error_message = page.locator('text="Vous avez √©t√© bloqu√©"')
            if await error_message.is_visible(timeout=3000):
                logger.error("‚ùå Blocage anti-bot d√©tect√© par Leboncoin.")
                await page.screenshot(path=f"anti_bot_error_attempt_{attempt}.png")
                raise Exception("Blocage anti-bot d√©tect√© avant clic sur Locations")

            # √âtape 7 : Cliquer sur le lien "Locations" avec une attente explicite
            # Capturer une capture d'√©cran et le contenu HTML pour d√©bogage
            await page.screenshot(path=f"before_locations_click_attempt_{attempt}.png")
            page_content = await page.content()
            with open(f"before_locations_click_attempt_{attempt}.html", "w", encoding="utf-8") as f:
                f.write(page_content)
            logger.info(f"üì∏ Capture d'√©cran et contenu HTML sauvegard√©s avant clic (attempt {attempt}).")

            await human_like_delay_search(2, 5)
            await locations_link.hover()
            logger.info("üñ±Ô∏è Survol du lien 'Locations' effectu√©.")
            await human_like_delay_search(0.5, 1.5)

            # Tentative de clic avec plusieurs m√©thodes
            try:
                # M√©thode 1 : Clic via human_like_click_search
                async with page.expect_navigation(timeout=60000) as navigation_info:
                    await human_like_click_search(page, LOCATIONS_LINK, move_cursor=True, click_variance=30)
                    logger.info("üñ±Ô∏è Clic sur le lien 'Locations' effectu√© via human_like_click_search.")
                await navigation_info.value
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è √âchec du clic via human_like_click_search : {e}")
                try:
                    # M√©thode 2 : Clic via JavaScript
                    logger.info("üîÑ Tentative de clic via JavaScript...")
                    async with page.expect_navigation(timeout=60000) as navigation_info:
                        await page.evaluate("""
                            (selector) => {
                                const link = document.querySelector(selector);
                                if (link) {
                                    const event = new Event('click', { bubbles: true, cancelable: true });
                                    link.dispatchEvent(event);
                                    link.click();
                                } else {
                                    throw new Error("Lien non trouv√© pour clic JavaScript");
                                }
                            }
                        """, LOCATIONS_LINK)
                        logger.info("üñ±Ô∏è Clic sur le lien 'Locations' effectu√© via JavaScript.")
                    await navigation_info.value
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è √âchec du clic via JavaScript : {e}")
                    # M√©thode 3 : Navigation directe
                    logger.info("üîÑ Tentative de navigation directe...")
                    await page.goto(EXPECTED_LOCATIONS_URL, timeout=60000)
                    logger.info("üåê Navigation directe vers 'Locations' effectu√©e.")

            # √âtape 8 : Attendre la redirection et v√©rifier la page "Locations"
            logger.info("‚è≥ Attente de la redirection vers la page 'Locations'...")
            await page.wait_for_load_state("domcontentloaded", timeout=60000)

            # V√©rifier l'URL apr√®s la navigation
            current_url = page.url
            logger.info(f"üåê URL actuelle apr√®s navigation : {current_url}")
            if EXPECTED_LOCATIONS_URL not in current_url:
                logger.warning(f"‚ö†Ô∏è URL incorrecte apr√®s navigation ({current_url}), tentative de navigation JavaScript...")
                await page.evaluate(f"window.location.href = '{EXPECTED_LOCATIONS_URL}'")
                await page.wait_for_load_state("domcontentloaded", timeout=60000)
                current_url = page.url
                logger.info(f"üåê URL apr√®s navigation JavaScript : {current_url}")
                if EXPECTED_LOCATIONS_URL not in current_url:
                    logger.error(f"‚ùå √âchec de la navigation vers {EXPECTED_LOCATIONS_URL}")
                    await page.screenshot(path=f"navigation_error_attempt_{attempt}.png")
                    raise Exception(f"Navigation vers 'Locations' √©chou√©e, URL actuelle : {current_url}")

            # V√©rifier la pr√©sence du bouton "Afficher tous les filtres" ou d'un conteneur de r√©sultats
            navigation_confirmed = False
            if EXPECTED_LOCATIONS_URL in current_url:
                logger.info("‚úÖ URL correcte d√©tect√©e.")
                try:
                    await page.locator(RESULTS_CONTAINER).first.wait_for(state="visible", timeout=15000)
                    logger.info("‚úÖ Conteneur de r√©sultats visible, navigation confirm√©e.")
                    navigation_confirmed = True
                except PlaywrightTimeoutError:
                    logger.warning("‚ö†Ô∏è Conteneur de r√©sultats non trouv√©, v√©rification du bouton 'Afficher tous les filtres'...")

            if not navigation_confirmed:
                try:
                    await page.locator(FILTERS_BUTTON).wait_for(state="visible", timeout=15000)
                    logger.info("‚úÖ Page 'Locations' charg√©e avec le bouton 'Afficher tous les filtres' visible.")
                    navigation_confirmed = True
                except PlaywrightTimeoutError:
                    logger.warning(f"‚ö†Ô∏è Bouton 'Afficher tous les filtres' non trouv√© apr√®s navigation. URL actuelle : {current_url}")
                    if await error_message.is_visible(timeout=3000):
                        logger.error("‚ùå Blocage anti-bot d√©tect√© apr√®s navigation.")
                        await page.screenshot(path=f"anti_bot_error_after_navigation_attempt_{attempt}.png")
                        raise Exception("Blocage anti-bot d√©tect√© apr√®s navigation")
                    page_content = await page.content()
                    with open(f"page_content_attempt_{attempt}.html", "w", encoding="utf-8") as f:
                        f.write(page_content)
                    logger.error(f"‚ùå √âchec de la navigation vers {EXPECTED_LOCATIONS_URL}, contenu de la page sauvegard√© dans page_content_attempt_{attempt}.html")
                    await page.screenshot(path=f"navigation_error_attempt_{attempt}.png")
                    raise Exception(f"Navigation vers 'Locations' √©chou√©e, URL actuelle : {current_url}")

            # √âtape 9 : V√©rifier Gimii apr√®s navigation
            gimii_reappeared = await close_gimii_popup(page)
            if gimii_reappeared:
                logger.warning("‚ö†Ô∏è Popup Gimii r√©apparue sur la page 'Locations', ferm√©e √† nouveau.")

            logger.info("‚úÖ Navigation vers 'Locations' r√©ussie.")
            return True

        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erreur lors de la navigation (Tentative {attempt}/{max_attempts}) : {e}")
            if attempt == max_attempts:
                logger.error("‚ùå √âchec apr√®s toutes les tentatives.")
                raise
            try:
                await page.reload(timeout=60000)
                await human_like_delay_search(5, 10)
                await wait_for_page_load(page)
            except Exception as reload_error:
                logger.error(f"‚ùå √âchec du rechargement de la page : {reload_error}")
                raise

async def apply_filters(page, api_responses: list):
    FILTRES_BTN = 'button[title="Afficher tous les filtres"]'
    MAISON_CHECKBOX = 'button[role="checkbox"][value="1"]'
    APPARTEMENT_CHECKBOX = 'button[role="checkbox"][value="2"]'
    PRO_CHECKBOX = 'button[role="checkbox"][value="pro"]'
    SEARCH_BTN = page.locator('#radix-\\:Rbbj6qcrl6\\: > footer button[aria-label="Rechercher"][data-spark-component="button"]')
    LOGIN_PAGE_INDICATOR = 'input[name="email"]'

    await init_db()
    logger.info("‚úÖ Base de donn√©es initialis√©e pour cette session.")

    logger.info("üñ±Ô∏è Clic sur 'Afficher tous les filtres'...")
    filter_button = page.locator(FILTRES_BTN)
    await expect(filter_button).to_be_visible(timeout=60000)
    if not await check_and_solve_captcha(page, "clic sur Filtres"):
        raise Exception("√âchec CAPTCHA avant clic sur Filtres")
    
    await human_like_click_search(page, FILTRES_BTN, click_delay=0.7, move_cursor=True)
    await human_like_delay_search(2, 4)

    if await page.locator(LOGIN_PAGE_INDICATOR).is_visible(timeout=5000):
        logger.error("‚ö†Ô∏è Redirection vers la page de login d√©tect√©e apr√®s clic sur 'Afficher tous les filtres'.")
        logger.info("üîÑ Tentative de retour √† la page des locations...")
        await page.go_back(timeout=60000)
        await page.wait_for_load_state("networkidle", timeout=30000)
        if not await page.locator(FILTRES_BTN).is_visible(timeout=10000):
            logger.error("‚ùå Impossible de revenir √† la page des filtres.")
            raise Exception("Redirection vers login non r√©solue")
        logger.info("‚úÖ Retour √† la page des filtres r√©ussi, nouvelle tentative de clic...")
        await human_like_click_search(page, FILTRES_BTN, click_delay=0.7, move_cursor=True)
        await human_like_delay_search(2, 4)

    logger.info("üìú Application du filtre 'Maison'...")
    await page.wait_for_selector(MAISON_CHECKBOX, state="visible")
    await human_like_scroll_to_element_search(page, MAISON_CHECKBOX, scroll_steps=4, jitter=True)
    if not await check_and_solve_captcha(page, "clic sur Maison"):
        raise Exception("√âchec CAPTCHA avant clic sur Maison")
    await human_like_click_search(page, MAISON_CHECKBOX, click_delay=0.5, move_cursor=True)
    await human_like_delay_search(1, 2)

    logger.info("üìú Application du filtre 'Appartement'...")
    await page.wait_for_selector(APPARTEMENT_CHECKBOX, state="visible", timeout=40000)
    await human_like_scroll_to_element_search(page, APPARTEMENT_CHECKBOX, scroll_steps=4, jitter=True)
    if not await check_and_solve_captcha(page, "clic sur Appartement"):
        raise Exception("√âchec CAPTCHA avant clic sur Appartement")
    await human_like_click_search(page, APPARTEMENT_CHECKBOX, click_delay=0.5, move_cursor=True)
    await human_like_delay_search(1, 2)

    api_events = []
    async def on_api_response(response):
        try:
            if response.url.startswith(TARGET_API_URL) and response.status == 200:
                json_response = await response.json()
                if "ads" in json_response and json_response["ads"]:
                    api_events.append(json_response)
                    logger.info(f"üì° Interception API : {len(json_response['ads'])} annonces trouv√©es")
                    for ad in json_response["ads"]:
                        await process_ad(ad)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erreur lors du traitement de la r√©ponse API : {e}")

    page.on("response", lambda response: asyncio.create_task(on_api_response(response)))
    logger.info("üéôÔ∏è √âcouteur API activ√© √† partir de 'Professionnel'.")

    logger.info("üìú Application du filtre 'Professionnel'...")
    await human_like_delay_search(1, 2)
    api_responses.clear()
    await human_like_scroll_to_element_search(page, PRO_CHECKBOX, scroll_steps=4, jitter=True)
    if not await check_and_solve_captcha(page, "clic sur Professionnel"):
        raise Exception("√âchec CAPTCHA avant clic sur Professionnel")
    await human_like_click_search(page, PRO_CHECKBOX, click_delay=0.5, move_cursor=True)
    await asyncio.sleep(random.uniform(2, 5))

    initial_response = await get_latest_valid_api_response(api_events)
    if not initial_response:
        logger.warning("‚ö†Ô∏è Aucune r√©ponse API valide intercept√©e apr√®s 'Professionnel'.")
    else:
        logger.info(f"‚úÖ R√©ponse API initiale captur√©e : {len(initial_response['ads'])} annonces.")

    logger.info("üîÑ Clic sur 'Rechercher' pour charger la page 1 et pr√©parer la pagination...")
    try:
        await SEARCH_BTN.wait_for(state="visible", timeout=20000)
        await human_like_scroll_to_element(page, '#radix-\\:Rbbj6qcrl6\\: > footer button[aria-label="Rechercher"][data-spark-component="button"]', scroll_steps=2, jitter=True)
        if not await check_and_solve_captcha(page, "clic sur Rechercher"):
            raise Exception("√âchec CAPTCHA avant clic sur Rechercher")
        await human_like_click_search(page, '#radix-\\:Rbbj6qcrl6\\: > footer button[aria-label="Rechercher"][data-spark-component="button"]', move_cursor=True, click_delay=0.7, click_variance=30)
        await human_like_delay_search(2, 5)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du clic sur 'Rechercher' : {str(e)}")
        await page.screenshot(path="search_button_error.png")
        raise

    final_response = await get_latest_valid_api_response(api_events)
    if not final_response:
        logger.warning("‚ö†Ô∏è Aucune r√©ponse API valide intercept√©e apr√®s 'Rechercher'.")
    else:
        logger.info(f"‚úÖ R√©ponse API finale captur√©e : {len(final_response['ads'])} annonces.")

    logger.info("‚úÖ Filtres appliqu√©s, pr√™t pour la pagination.")
    return final_response or initial_response, lambda response: asyncio.create_task(on_api_response(response))

if __name__ == "__main__":
    logger.info("Module searchParser charg√©.")